创建版本库

第一步，创建一个空目录：
$ mkdir learngit //在子目录创建一个learngit文件
$ cd learngit    //
$ pwd		//pwd命令用于显示当前目录。
/Users/michael/learngit
第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

编写一个readme.txt文件
第一步，用命令git add告诉Git，把文件添加到仓库
$ git add readme.txt
第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 注意： git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录



时光机穿梭
文件被修改后
git status 命令可以让我们时刻掌握仓库当前的状态
git diff   文件修改后可以用这个命令来看修改的内容
文件修改后再提交的两个步骤：
第一步是git add
$ git add readme.txt
第二部是提交
$ git commit -m "add distributed" 
[master ea34578] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-

版本回退
git log  命令显示从最近到最远的提交日志
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：$ git log --pretty=oneline
git reset  回退到哪一个版本 HEAD表示当前版本 HEAD^表示上一个版本 版本多的话可以写HEAD~100 比如$ git reset --hard HEAD^
cat 命令是查看文本内容如 $ cat readme.txt
如果想回到最新版本可以往上找最新版本的commit id比如 $ git reset --hard 3333333;
git reflog查看命令历史，以确定要回到未来哪个版本

git暂存区stage(index)和工作区
git add命令后文件放在stage中，还有有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD，git commit -""提交后暂存区的内容释放。

管理修改
git add后再修改文件然后git commit -"",修改后的不会被提交，必须修改后再次git add。

撤销修改
git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
如果在git status发现修改后已经放在暂存区了，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

删除文件
$ rm file 比如$ rm test.txt 这是要你确认是否要删除。
$ git rm file 这时是删除，且要重新提交下 $ git commit -m""。
若是删除错误$ git checkout --text..txt


远程仓库
第1步：创建SSH Key  $ ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

添加远程仓库
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库 在Repository name填入learngit
在本地的learngit仓库下运行命令：$ git remote add origin git@github.com:hhyezi/learngit.git

从远程库克隆
$ git clone git@github.com:hhyezi/gitskills.git
$ cd gitskills
$ ls
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


分支管理
创建与合并分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

解决冲突
$ git log --graph --pretty=oneline --abbrev-commit 查看分支合并图

分支管理策略
合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
注意--no-ff参数，表示禁用Fast forward（快进模式） 如：$ git merge --no-ff -m "merge with no-ff" dev
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

Bug分支
$ git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

Feature分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作
git remote 查看远程库的信息
git remote -v  显示更详细的信息
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
$ git push origin master
如果要推送其他分支，比如dev，就改成：$ git push origin dev
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


标签管理
创建标签
git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
git tag可以查看所有标签。

操作标签
git push origin <tagname>可以推送一个本地标签；
git push origin --tags可以推送全部未推送过的本地标签；
git tag -d <tagname>可以删除一个本地标签；
git push origin :refs/tags/<tagname>可以删除一个远程标签。


